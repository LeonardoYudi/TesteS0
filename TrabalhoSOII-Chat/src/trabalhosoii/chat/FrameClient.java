/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trabalhosoii.chat;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author supor
 */
public class FrameClient extends javax.swing.JFrame implements Runnable {
    private Socket conexao;
    private PrintStream saida;
    private String nome;
    private boolean serverStatus;
    /**
     * Creates new form FrameClient
     */
    public FrameClient() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtMensagensChat = new javax.swing.JTextArea();
        txtNovaMensagem = new javax.swing.JTextField();
        btnEnviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtMensagensChat.setEditable(false);
        txtMensagensChat.setColumns(20);
        txtMensagensChat.setRows(5);
        jScrollPane1.setViewportView(txtMensagensChat);

        btnEnviar.setText("Enviar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtNovaMensagem)
                        .addGap(18, 18, 18)
                        .addComponent(btnEnviar)))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNovaMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnviar))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        // TODO add your handling code here:
        enviarMensagem(this.txtNovaMensagem.getText().trim());
        this.txtNovaMensagem.setText("");
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        sairChat();
    }//GEN-LAST:event_formWindowClosing
    
    
    /*
        
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtMensagensChat;
    private javax.swing.JTextField txtNovaMensagem;
    // End of variables declaration//GEN-END:variables
    private void enviarMensagem(String msg){
        
        try {
            
            //BufferedReader teclado = new BufferedReader(new InputStreamReader(System.in));
            //System.out.print("Digite seu nome: ");
            //String meuNome = teclado.readLine();
            //envia o nome digitado para o servidor
            saida.println(msg);
            //if(serverStatus)
             exibirMensagem("Eu "+Constantes.separador+msg);
            
        } catch (Exception ex) {
            exibirMensagem(Constantes.erroClienteServidor);
        }
       
    }
    
    private void exibirMensagem(String msg){
        if(serverStatus)
            this.txtMensagensChat.append("Hora " + msg+"\n");
        else
            this.txtMensagensChat.append("Hora " + Constantes.erroClienteServidor+"\n");
    }
    
    private void sairChat(){
        saida.println("/exitChat");
    }
    @Override
    public void run() {
        
        String nome = JOptionPane.showInputDialog(null,"Qual o seu nome?").trim();
        
        try{
            this.conexao = new Socket(Constantes.ipChat, Constantes.porta);
            this.saida = new PrintStream(conexao.getOutputStream());
            saida.println(nome);
            this.serverStatus = true;
            BufferedReader entrada = new BufferedReader(new InputStreamReader(this.conexao.getInputStream()));
            //cria variavel de mensagem
            //exibirMensagem("Bem vindo ao chat " + nome);
            /*if(entrada.readLine() != null)
                exibirMensagem("Bem vindo ao chat " + nome);
            else{
                JOptionPane.showMessageDialog(null, "Usuário já conectado, tente novamente com outro usuário","Ops",
                JOptionPane.ERROR_MESSAGE);
            }*/
                
            this.setTitle(nome);
            this.setVisible(true);
            String msg;
            while (true)
            {
                // pega o que o servidor enviou
                msg = entrada.readLine();
                
                //se a mensagem contiver dados, passa pelo if, 
				// caso contrario cai no break e encerra a conexao Esse filtro não será util
                if (msg == null) {
                    JOptionPane.showMessageDialog(null,Constantes.erroClienteServidor); 
                    //System.exit(0);
                    this.serverStatus = false;
                    try {
                        Thread.sleep(5000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FrameClient.class.getName()).log(Level.SEVERE, null, ex);
                    }finally{
                        System.exit(0);
                    }
                }
                
                //Chamada do método para escrever uma mensagem
                exibirMensagem(msg);
            }
        }catch(IOException e){
            //JOptionPane.showM
            this.serverStatus = false;
            exibirMensagem(Constantes.erroClienteServidor);
            
            //JOptionPane.showMessageDialog(null, e.getMessage(), "Ops", JOptionPane.ERROR_MESSAGE);
        }
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
